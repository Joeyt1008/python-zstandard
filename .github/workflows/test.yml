on:
  push:
  pull_request:
  schedule:
    - cron: '30 13 * * *'
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-20.04'
        py:
          - '3.8'
        arch:
          - 'x86'
    runs-on: ${{ matrix.os }}
    env:
      # Enable fuzzing tests, other expensive tests.
      ZSTD_SLOW_TESTS: '1'
      # Make all compile warnings fatal.
      ZSTD_WARNINGS_AS_ERRORS: '1'
      # More thorough fuzzing coverage.
      HYPOTHESIS_PROFILE: 'ci'
      # Activate Python development mode so we get warnings.
      PYTHONDEVMODE: '1'
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}
          architecture: ${{ matrix.arch }}

      - name: Install Rust
        if: matrix.py != '3.5' && matrix.arch == 'x64'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal

      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          pip install --require-hashes -r ci/requirements.txt

      - name: Build (Rust)
        if: matrix.py != '3.5' && matrix.arch == 'x64'
        run: |
          python setup.py --rust-backend develop

      - name: Build (No Rust)
        if: matrix.py == '3.5' || matrix.arch != 'x64'
        run: |
          python setup.py develop

      - name: Test C Backend
        run: |
          pytest --numprocesses=auto -v tests/

      - name: Test CFFI Backend
        env:
          PYTHON_ZSTANDARD_IMPORT_POLICY: 'cffi'
        run: |
          pytest --numprocesses=auto -v tests/

      - name: Test Rust Backend
        if: matrix.py != '3.5' && matrix.arch == 'x64'
        env:
          PYTHON_ZSTANDARD_IMPORT_POLICY: 'rust'
        run: |
          pytest --numprocesses=auto -v tests/

  armv64_job:
      name: Build and Test for arm64
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1
        - name: Install and Run tests
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
              arm64v8/ubuntu:20.04 \
              bash -exc 'apt-get update && apt-get -y install python3 python3-pip python3-venv curl && \
              python3 -m pip install virtualenv && python3 -m venv py38-venv && \
              source py38-venv/bin/activate && \
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -v -y --default-toolchain none && \
              export PATH=$HOME/.cargo/bin:${PATH} && \
              rustup --version && \
              rustup install stable && \
              rustup default stable && \
              rustup --version && \
              python -m pip install --upgrade pip && \
              python --version && \
              uname -m && \
              whoami && \
              pwd && \
              ls && \
              cargo --version && \
              pip install --require-hashes -r ci/requirements.txt && \
              python setup.py --rust-backend develop && \
              python setup.py develop && \
              pytest --numprocesses=auto -v tests/ && \
              export PYTHON_ZSTANDARD_IMPORT_POLICY=: 'cffi' && \
              pytest --numprocesses=auto -v tests/ && \
              export PYTHON_ZSTANDARD_IMPORT_POLICY=: 'rust' && \
              pytest --numprocesses=auto -v tests/ && \
              deactivate'
